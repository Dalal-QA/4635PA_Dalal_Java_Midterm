***ANSWER ALL OF THE QUESTIONS BELOW***

What is a programming language?
Answer: A programming language is a language people use when developing software to tell a computer what to do.
They come in many forms, but most programming languages rely on an interpreter that translates the human-readable
language into binary so that the computer can put the instructions into action.

What is a JDK composed of? Define each components?
Answer:JDK is composed of the Java compiler, JVM, JRE, development tools, and Java API libraries. It provides everything needed to develop, compile, and run Java applications.
1. Java Compiler: The Java compiler, javac, is responsible for compiling Java source code (.java files) into bytecode (.class files) that can be executed by the Java Virtual Machine (JVM).
2. Java Virtual Machine (JVM): The JVM is the runtime environment for executing Java applications. It is responsible for interpreting and executing the Java bytecode generated by the compiler.
3. Java Runtime Environment (JRE): The JRE is a subset of the JDK and includes the JVM, along with libraries and other files required to run Java applications. It does not include development tools such as the compiler (javac) or debugging tools. The JRE is needed on a system to run Java applications but is not necessary for development.
4. Java Development Tools: The JDK provides a set of tools to aid in Java application development. Some of the commonly used tools include:
    -javac, java , jar,jconsole
5. Java API Libraries: The JDK includes a comprehensive set of standard libraries known as the Java API (Application Programming Interface). These libraries provide pre-built classes and methods that developers can utilize in their Java programs to perform common tasks, such as working with files, networking, GUI (Graphical User Interface), database access, and more. The Java API makes it easier and more efficient to develop Java applications.
What is an IDE?
Answer:An IDE, or Integrated Development Environment, enables programmers to consolidate the different aspects of writing a computer program.
 IDEs increase programmer productivity by combining common activities of writing software into a single application: editing source code, building executables, and debugging.

What are some of the most popular Java IDEs available in the market?
Answer: Eclipse, IntelliJ IDEA, NetBeans,Visual Studio Code,Oracle JDeveloper,BlueJ.

Explain the entire java life cycle.
Answer:
1.The development process begins by writing Java source code files using a text editor or an Integrated Development Environment (IDE). Java source code is written in plain text files with a .java extension.
2.The next step is to compile the Java source code using a Java compiler. The compiler converts the human-readable source code into a machine-readable format called bytecode. It checks for syntax errors and produces compiled bytecode files with a .class extension.
3.The Java bytecode is platform-independent and is executed by the Java Virtual Machine (JVM). The JVM is responsible for running Java programs and provides an execution environment. It interprets the bytecode or, in some cases, just-in-time (JIT) compiles it to native machine code for better performance.
4.The JVM loads the compiled bytecode files into memory when the Java program is executed. It verifies the bytecode for security and correctness, ensuring it follows the rules and restrictions of the Java language.
5.Once the bytecode is loaded and verified, the JVM starts executing the Java program from its entry point, typically the main() method. The program executes statements and performs computations according to the defined logic.
6. Java manages memory automatically through a process called garbage collection. The JVM automatically identifies and frees up memory occupied by objects that are no longer referenced by the program. This relieves developers from manual memory management tasks
7.During program execution, if an exceptional condition occurs, such as an error or unexpected behavior, Java provides an exception handling mechanism. It allows the program to catch and handle exceptions gracefully, preventing abrupt termination.
8.When the program execution is complete or a specific termination condition is met, the Java program terminates. At this stage, any necessary cleanup tasks can be performed, such as releasing resources or closing connections.
What is a class?
Answer: A Java class is a set of object which shares common characteristics/ behavior and common properties/ attributes. There are certain points about Java Classes as mentioned below:

        -Class is not a real-world entity. It is just a template or blueprint for creating objects .
        -Class does not occupy memory.
        -Class is a group of variables of different data types and a group of methods.
What is an object?

Answer:An object is an instance of a class. It represents a specific entity or data structure that has state (data) and behavior (methods). In other words, an object is a runtime entity that encapsulates data and provides functionality to interact with that data
objects are created based on classes, which serve as blueprints or templates for creating objects. A class defines the properties (variables or fields) that an object can have and the methods (functions) that can be performed on the object.
What is the entry point of a Java project?
Answer:

Why is the main() method static?
Answer: The entry point of a Java project is a specific method called main(). It serves as the starting point for the execution of a Java program. When a Java program is run, the Java Virtual Machine (JVM) looks for the main() method as the initial entry point.

Which class is the superclass of all classes?
Answer: In Java, the Object class is the superclass of all other classes. It is the ultimate base class for all Java classes. Every class in Java directly or indirectly inherits from the Object class.

What is difference between path and classpath variables?
Answer:The "path" is a system-level environment variable that specifies directories for finding executable files, while the "classpath" is a Java-specific concept that specifies the directories or JAR files used by the JVM to find class files and resources at runtime.
What is the difference between an Interface and Abstract class?
Answer:

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer:An abstract classes are used to provide a base class for concrete subclasses to inherit from, while interfaces are used to define a set of methods that a class must implement. Abstract classes can have implemented and abstract methods, while interfaces can only have abstract methods. Classes can inherit from only one abstract class, but can implement multiple interfaces.

What is Access Modifier?
Answer: Access modifiers help to restrict the scope of a class, constructor, variable, method, or data member. It provides security, accessibility, etc to the user depending upon the access modifier used with the element.

What is OOP? Define each OOP concept.
Answer: OOP stands for Object-Oriented Programming. It is a programming paradigm that organizes software design around objects, which are instances of classes. Java is an object-oriented programming language and fully supports the principles and features of OOP.
1.Objects: Objects are the basic runtime entities that represent real-world entities or concepts. They encapsulate data (state) and behavior (methods)
2.Classes: A class is a blueprint or template for creating objects.
3.Abstraction is a process of hiding implementation details and exposes only the functionality to the user. In abstraction, we deal with ideas and not events. This means the user will only know “what it does” rather than “how it does”
4.Encapsulation is the process of wrapping code and data (variables and methods)together into a single class.
5.Inheritance is the process of one class inheriting properties and methods from another class in Java. Inheritance is used when we have is-a relationship between objects.  Inheritance in Java is implemented using extends keyword.
6.Polymorphism means many forms. The polymorphism can be present in the case of inheritance also. The functions behave differently based on the actual implementation.  Polymorphism is achieved through method overriding and method overloading in Java.
What is Java Package and which package is imported by default?
Answer:

What is an API? List some API's that you have used so far.
Answer:

Does java support multiple inheritance? Why or why not?
Answer:

What is method overloading? List all of the different ways to overload.
Answer:

Explain exceptions in java and how to handle them.
Answer:

What is static keyword? When and how do we use it?
Answer:

What is final keyword? When and how do we use it?
Answer:

Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer:

Can we have multiple constructors in a class?
Answer:

If we don't have a constructor declared, what is called during the object creation?
Answer:

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer:

Is JVM platform independent?
Answer:

What version of Java are you using?
Answer:

What does JAR stand for?
Answer:

What is the difference between JDK and JVM?
Answer:

What is the difference between JVM and JRE?
Answer:

Explain the difference between compile-time and run-time?
Answer:

What is heap?
Answer:

How does Java manage its memory?
Answer:

What is the difference between String, StringBuffer and StringBuilder?
Answer:

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: